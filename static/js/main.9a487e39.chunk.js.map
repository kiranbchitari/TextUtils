{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9a487e39.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n            setText(event.target.value) \r\n    }\r\n\r\n    const handleCopy = () => {\r\n        console.log(\"I am copy\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        text.setSelectionRange(0, 9999);\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(''); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1 my-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-2\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1 my-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1 my-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text===\"\"?0:text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{text===\"\"?0:0.008 *  text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\n// import About from './components/About';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\n \r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type)=>{\r\n      setAlert({\r\n        msg: message,\r\n        type: type\r\n      })\r\n      setTimeout(() => {\r\n          setAlert(null);\r\n      }, 1500);\r\n  }\r\n\r\n  const toggleMode = ()=>{\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n      document.title = 'TextUtils - Dark Mode';\r\n      // setInterval(() => {\r\n      //   document.title = 'TextUtils is Amazing Mode';\r\n      // }, 2000);\r\n      // setInterval(() => {\r\n      //   document.title = 'Install TextUtils Now';\r\n      // }, 1500);\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n      document.title = 'TextUtils - Light Mode';\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\r\n    {/* <Navbar/> */}\r\n    {/* <Router> */}\r\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n    <Alert alert={alert}/>\r\n    <div className=\"container my-3\">\r\n    {/* <Switch>\r\n    {/* /users --> Component 1\r\n        /users/home --> Component 2 */}\r\n          {/* <Route exact path=\"/about\">\r\n            <About />\r\n          </Route>\r\n          <Route exact path=\"/\"> */}\r\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\r\n          {/* </Route>\r\n    </Switch> */}\r\n    </div>\r\n    {/* </Router> */}\r\n    </> \r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}